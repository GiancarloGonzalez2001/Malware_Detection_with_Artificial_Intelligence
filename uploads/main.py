"""
#!/usr/bin/env python
# coding: utf-8

# # Malware detection using Artifical Intelligence

# 
# 
# 

# Rosario University                                                                           
# Forensics analysis and incident management                                                   
# Final project                                                                                 
# 2021 - 2s                                                                                     
# This proyect is based in the book "Hands-On Artificial Intelligence for Cybersecurity"                                                                                             *
#                                                                                               
# Giancarlo González                                                                            
# Ángel López                                                                                   
#                                                                                               
# Link to the repository:                                                                       
# https://github.com/GiancarloGonzalez2001/Malware_Detection_with_Artificial_Intelligence         
"""


# All the libraries are imported

#import os
import pefile
import glob
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score


# Now we are goin to create de data set with the PE and save that information on the Excel page for test the algorithm

# In[7]:


# The csv excel file its open
csv = open('MalwareArtifacts.csv','w')

# The route to the csv file its specificated
files = glob.glob('C:/Users/gianc/OneDrive/Documentos/Universidad_Rosario/Analisis_Forence/Proyect/Malware_Detection_with_Artificial_Intelligence-main*')
# The csv headers are created
csv.write("NombreArchivo,AddressOfEntryPoint,MajorLinkerVersion,MajorImageVersion,MajorOperatingSystemVersion,DllCharacteristics,SizeOfStackReserve,NumberOfSections,ResourceSize,\n")


# ----------------------------------------------------------------------------------------------
# The data its written on the csv
for file in files:
    
    # List that include the exact name of the malicius and non malicius files for creating the dataset
    archivos = ["SumatraPDF-3.3.3-64-install.exe","NordVPNSetup.exe","Netflix.exe","redbear.exe"]
    
    # For loop that writes the data of the files contained on the previous list
    for i in range (len(archivos)):
        
        
        suspect_pe = pefile.PE(archivos[i])
        
        csv.write( str(archivos[i]) + ',') # The name of the file its written
        csv.write( str(suspect_pe.OPTIONAL_HEADER.AddressOfEntryPoint) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.MajorLinkerVersion) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.MajorImageVersion) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.MajorOperatingSystemVersion)+ ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.DllCharacteristics) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.SizeOfStackReserve) + ',')
        csv.write( str(suspect_pe.FILE_HEADER.NumberOfSections) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.DATA_DIRECTORY[2].Size) + "\n")

csv.close() # The csv file its closed


# with the data set created now we are going to upload the specific data and find the number clusters 

# In[86]:


# The previous csv its read
malware_dataset = pd.read_excel('C:/Users/gianc/OneDrive/Documentos/Universidad_Rosario/Analisis_Forence/Proyect/Malware_Detection_with_Artificial_Intelligence-main/malwares.xlsx')
malware_predict = pd.read_excel('C:/Users/gianc/OneDrive/Documentos/Universidad_Rosario/Analisis_Forence/Proyect/Malware_Detection_with_Artificial_Intelligence-main/MalwareArtifacts.xlsx')
# Train data 
samples = malware_dataset.iloc[:, [2,4,5,6]].values
print("Train data samples: \n",samples)
targets = malware_dataset.iloc[:, 8].values
print("Train data targets: \n",targets)
# Test data
data_test = malware_predict.iloc[:, [2,3,4,5]].values
print("Test data samples: \n", data_test)
targets_test = malware_predict.iloc[:, 9].values
print("Test data targets: \n",targets_test)
# data normalize
samples = preprocessing.Normalizer().fit_transform(samples)
data_test = preprocessing.Normalizer().fit_transform(data_test)


# In[87]:


# number clusters 
inercia = []
for i in range(1,12):
    k_means = KMeans(n_clusters =i , max_iter = 450)
    k_means.fit(samples)
    inercia.append(k_means.inertia_)
plt.title("Jambú elbow")
plt.ylabel("Inertia")
plt.xlabel("Clusters number")
plt.plot(range(1,12),inercia,marker='o')
plt.show()


# with the optimal number of clusters according to our dataset, now we're going to train the algorithm 

# In[90]:


# Object creation
k_means = KMeans(n_clusters = 2)
k_means.fit(samples)
print("K-means labels: " + str(k_means.labels_))
print ("\nK-means Clustering Results:\n\n", pd.crosstab(targets,
k_means.labels_,rownames = ["Observed"],colnames = ["Predicted"]) )
print ("\nSilhouette coefficient: %0.3f" % silhouette_score(samples,
k_means.labels_, metric='euclidean'))
print("Process successfully completed") # Test message


# In[91]:


con_matr=confusion_matrix(targets,k_means.labels_ )
accuracy=accuracy_score(targets, k_means.labels_)
f1 = con_matr[0]
f2 = con_matr[1]
TP = f1[0]
FN = f1[1]
FP = f2[0]
TN = f2[1]
print("Sensitivity: ",TP/(TP+FN))    # clasificados corectamente clase 1
print("Specificity: ",TN/(TN+FP))    # clasificados correctamente clase 2 
print("Precision: ", TP/(TP+FP))
print("Negative Predictive value: ", TN/(TN+FN))
print("Accueracy: ", accuracy)


# Prediction with the test data 

# In[11]:


prediction = k_means.predict(data_test)
print("Data test: \n")
print("Prediction: ", prediction)
print("Real values: ", targets_test)
print("Malware : 1 \nNot malware: 0")