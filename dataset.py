
'''

***********************************************************************************************
                                                                                              *
Rosario University                                                                            *
Forensics analysis and incident management                                                    *
Final project                                                                                 *
2021 - 2s                                                                                     *
                                                                                              *
Giancarlo González                                                                            *
Ángel López                                                                                   *
                                                                                              *
Link to the repository:                                                                       *
https://github.com/GiancarloGonzalez2001/Malware_Detection_with_Artificial_Intelligence       *  
                                                                                              *
***********************************************************************************************

'''

# ---------------------------------------------------------------------------------------------

# All the libraries are imported

#import os
import pefile
import glob
#import numpy as np
import pandas as pd
#import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score


# ----------------------------------------------------------------------------------------------

# The csv excel file its open
csv = open('MalwareArtifacts.csv','w')

# The route to the csv file its specificated
files = glob.glob('/home/angel/Documentos/UR 2021-2/A. Forense/Proyecto Forense*')

# The csv headers are created
csv.write("NombreArchivo,AddressOfEntryPoint,MajorLinkerVersion,MajorImageVersion,MajorOperatingSystemVersion,DllCharacteristics,SizeOfStackReserve,NumberOfSections,ResourceSize,\n")


# ----------------------------------------------------------------------------------------------
# The data its written on the csv
for file in files:
    
    # List that include the exact name of the malicius and non malicius files for creating the dataset
    archivos = ["redbear.exe","ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa.exe",
                "Procmon.exe","Sp0tify.exe","idafree50.exe"]
    
    # For loop that writes the data contained on the previous list
    for i in range (len(archivos)):
        
        
        suspect_pe = pefile.PE(archivos[i])
        
        csv.write( str(archivos[i]) + ',') # The name of the file its written
        csv.write( str(suspect_pe.OPTIONAL_HEADER.AddressOfEntryPoint) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.MajorLinkerVersion) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.MajorImageVersion) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.MajorOperatingSystemVersion)+ ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.DllCharacteristics) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.SizeOfStackReserve) + ',')
        csv.write( str(suspect_pe.FILE_HEADER.NumberOfSections) + ',')
        csv.write( str(suspect_pe.OPTIONAL_HEADER.DATA_DIRECTORY[2].Size) + "\n")

csv.close() # The csv file its closed

# ----------------------------------------------------------------------------------------------

# The previous csv its read
malware_dataset = pd.read_csv('/home/angel/Documentos/UR 2021-2/A. Forense/Proyecto Forense/MalwareArtifacts.csv',
delimiter=',')

# Implementing and use of the K-Means algorithm 
samples = malware_dataset.iloc[:, [1,2,3,4]].values
targets = malware_dataset.iloc[:, 8].values

k_means = KMeans(n_clusters = 3 , max_iter = 450)
k_means.fit(samples)

print("K-means labels: " + str(k_means.labels_))
print ("\nK-means Clustering Results:\n\n", pd.crosstab(targets,
k_means.labels_,rownames = ["Observed"],colnames = ["Predicted"]) )
print ("\nSilhouette coefficient: %0.3f" % silhouette_score(samples,
k_means.labels_, metric='euclidean'))

# ----------------------------------------------------------------------------------------------
print("Process successfully completed") # Test message







